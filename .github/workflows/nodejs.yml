name: Build backstage Docker Image

on: push

jobs:
  plain_build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: docker/setup-buildx-action@v3
    - uses: docker/build-push-action@v6
      with:
        context: "{{defaultContext}}:nodejs"

  with_build_cloud:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - uses: docker/setup-buildx-action@v3
        with:
          version: "lab:latest"
          driver: cloud
          endpoint: "demotnemoto/demo"
          install: true
      - uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:nodejs"
          outputs: 'type=cacheonly'

# Each GitHub repository is only given 10GB of cache space, after which, the oldest entries in the cache are evicted. If your Docker image is reasonably large, or has several layers, you will likely run into this limit and not reap the benefits of effective caching.
# GitHubâ€™s cache is only scoped to the development branch running the Docker build. Sharing the cached layers across your organization, or with other build systems, is not possible with this approach.
# with_gha_cache:
#   runs-on: ubuntu-latest
#   steps:
#   - uses: actions/checkout@v4
#   - uses: docker/setup-buildx-action@v3
#   - uses: docker/build-push-action@v6
#     with:
#       context: "{{defaultContext}}:nodejs"
#       cache-from: type=gha
#       cache-to: type=gha,mode=max
